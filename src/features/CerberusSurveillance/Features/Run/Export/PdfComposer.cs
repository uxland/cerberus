using System.Globalization;
using Cerberus.Surveillance.Features.Features.Operation;
using NodaTime;
using NodaTime.Text;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;

namespace Cerberus.Surveillance.Features.Features.Run.Export;

public class SurveillanceRunPdfDocument(SurveillanceRun run) : IDocument
{
    private static readonly string PrimaryColor = "#ffc200";      // Amarillo / Naranja cerberus
    private static readonly string DarkBlue = "#1E3A8A"; // Azul Oscuro
    private static readonly string LightBlue = "#F7F8F8";       // Azul muy claro
    private static readonly string OrangeAccentColor = "#FFF7ED"; // Naranja muy claro para accent
    private static readonly string SuccessColor = "#00ae7a";      // Verde 
    private static readonly string WarningColor = "#EFA55D";      // Naranja 
    private static readonly string DangerColor = "#E2756E";       // Rojo 
    private static readonly string NeutralGray = "#6B7280";       // Gris neutro
    private static readonly string SuperLightGray = "#E0E3E3";     // Gris muy claro
    private static readonly Color LightGray = Colors.Grey.Lighten5; // Gris muy claro como Color

    // SVG del logo de Cerberus
    private static readonly string LogoSvg = """
    <svg id="Capa_1" data-name="Capa 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 503 388">
  <defs>
    <style>
      .cls-1 {
        fill: #eceae4;
      }

      .cls-2 {
        fill: #e4e3df;
      }

      .cls-3 {
        fill: #767674;
      }

      .cls-4 {
        fill: #edeae4;
      }

      .cls-5 {
        fill: #ecebe6;
      }

      .cls-6 {
        fill: #91918f;
      }

      .cls-7 {
        fill: #efeeea;
      }

      .cls-8 {
        fill: #ebe8e3;
      }

      .cls-9 {
        fill: #e8e6e1;
      }

      .cls-10 {
        fill: #efeeec;
      }

      .cls-11 {
        fill: #e9e7e2;
      }

      .cls-12 {
        fill: #fff;
      }

      .cls-13 {
        fill: #e3e2de;
      }

      .cls-14 {
        fill: #f1eee9;
      }

      .cls-15 {
        fill: #e5e4df;
      }

      .cls-16 {
        fill: #eae8e3;
      }

      .cls-17 {
        fill: #eeece6;
      }

      .cls-18 {
        fill: #eae8e1;
      }

      .cls-19 {
        fill: #edece7;
      }

      .cls-20 {
        fill: #9f9e9d;
      }

      .cls-21 {
        fill: #f1eee8;
      }

      .cls-22 {
        fill: #cb2b1f;
      }

      .cls-23 {
        fill: #ebe9e3;
      }

      .cls-24 {
        fill: #e8e8e6;
      }
    </style>
  </defs>
  <path d="M296.5,92c-2.6034-2.9442-4.39969-8.47597-6.97919-11.74504,2.43116-5.80446,5.18779-12.43062,3.47941-18.75001l24.99964,4.50007-7.99986,16.99497c-1.03656-.10548-9.66615,7.84992-11.01347,9.26158-.30165.31605-.46298.79878-.49562,1.23539-1.03226.17096-1.42046-.85185-1.99091-1.49697Z"/>
  <path d="M291,89.5l1.33114,1.06428c16.84485,28.70608,24.97159,61.91835,28.89852,94.51339.71873,5.1529,2.0085,10.23875,4.30275,14.94244-4.59379-34.93806-9.65529-70.62766-26.35523-102.19521-.92531-2.19149,12.44756-12.53483,14.87225-14.0623.90075-2.87915,1.81857-5.75743,2.75345-8.63484l.69712-.12775c2.21888-2.58364,3.29102-6.1337,5.09602-9.15398,7.259-12.14637,17.69578-23.12862,29.15652-31.34344.28212,5.73058-.61362,11.4817-.24777,17.24265.29374,4.62549,1.33726,9.26038,2.542,13.70619l11.22653.84341c8.45129-10.83457,17.9893-20.62257,27.72173-30.29468l-6.46367,36.45476c8.6328,3.8952,17.56179,8.83971,24.91947,14.84427,4.19904,3.42682,9.74891,8.35248,9.00894,14.403-.21134,1.72808-1.49994,3.03474-1.44464,4.77685,7.20138,2.51928,14.48839,4.89656,21.60972,7.64614,7.09623,2.73989,16.45068,6.04795,23.06344,9.43656,5.62618,2.88306,4.76001,6.77297,2.69159,12.06816-.60841,1.55754-2.58053,4.03017-2.77673,4.72327-.45465,1.60615-.38351,4.90345-.848,7.152-1.0722,5.19043-3.43127,10.07344-7.00001,13.99999-1.06432,1.17103-3.81251,2.9647-4.28701,3.71299-.82247,1.29702-.78937,4.0302-1.31805,5.68195-3.92745,12.27042-19.517,17.07982-31.15006,17.59482.36879-1.1361,3.25613-3.77248,1.98222-4.72727-2.83192-2.1225-14.15732-4.58556-17.98224-5.26764-2.90935.42474-5.87308.44357-8.8912.05651-30.81943-1.11349-31.72002,32.25989-23.32422,54.36559,1.80667,4.75687,4.76843,11.81779,7.63605,15.87744.07611.10775.84753-2.08658.49437-2.54691-15.57527-27.23864-18.23619-76.02162,26.71418-64.36271,2.59674.24148,4.38701,1.11151,5.37082,2.61008.9524.32231,2.01622,1.01929,3.03127,1.30176-4.57738,37.7265-17.75337,73.37382-39.62321,104.3563-30.85378,43.70982-77.04989,74.83531-126.65887,93.80631-46.39632-17.92019-89.79567-45.94408-120.44737-85.51619-24.60504-31.76572-39.97247-69.16538-45.33789-109.12246,21.67887-7.48731,47.93011,7.39861,52.70692,29.75342,2.0849,9.75702-.78907,18.6274-4.17798,27.71666-.10687,2.01399,4.75774,7.00486,5.00043,9.50221.18066,1.85906-2.31789,8.15309-2.8449,10.60036-1.03807,4.82047-1.9456,8.00067,1.60398,12.0992.55593-4.23995,1.24202-8.4736,2.38962-12.60558.57659-2.07602,3.64515-9.07925,3.63878-10.14285-.01469-2.45644-5.58211-8.39593-5.78758-10.52899-.12207-1.26722,3.84686-10.91503,4.36869-13.60826,3.23018-16.67122-6.89719-34.75067-21.35238-42.87142-14.75496-8.28916-30.55073-6.52234-46.00819-1.23703l4.99867,6.99655h-7.75c-9.74401,0-19.93922-6.27736-23.84472-15.15528-2.3679-5.38267-1.72797-3.91981-5.11325-8.38675-3.11816-4.11448-5.79986-9.19039-6.66376-14.33624-.29433-1.75321.16565-3.67989-.24844-5.25156-.47142-1.78925-3.14514-4.93092-3.95371-8.04463-1.86072-7.16544.10943-8.55901,6.23701-11.41241,10.89352-5.07273,23.48755-8.3204,34.79121-12.4619-.87065-4.78399-2.0972-7.90209,1.04631-12.20058,7.13503-9.75659,25.92975-17.73677,36.94014-22.31375l-5.93579-35.4368c10.00792,9.19857,19.61787,19.03519,26.26322,31.01875,1.86735.57644,2.1536-3.94637,2.24948-5.25099.48335-6.5772-.20164-13.27468-1.01259-19.76785,7.9506,4.67495,16.12282,11.07243,22.25196,17.99291.93175,1.05205,5.97348,7.1567,6.165,7.87234.2725,1.01825-1.29261,6.56397-1.41596,8.39127-.17453,2.58546.04355,5.18844.281,7.74715-5.85649,3.2701-11.4144,6.99178-16.78099,10.99513-.10714-2.09362-3.83394-5.86451-3.54786-7.68035.05924-.37599,3.82779-2.94255,4.93672-5.67351,2.59247-6.38447,1.0115-19.38108-4.38997-24.14484-.22527,4.13258,1.24847,8.59916.93341,12.68939-.389,5.05016-3.08934,9.93475-5.51847,14.24416-1.30404-.28355-9.91485-2.12592-9.91024-2.68385.9232-.84016,5.17087-6.54613,4.48753-7.24746-12.78678.93816-25.38615,4.73344-36.33354,11.41132-2.84898,1.73787-13.58736,9.35624-14.44843,12.06331-.53011,1.66658.54128,5.48291,2.44359,4.96538,1.52055-.41367,8.25464-8.27235,10.33624-9.4422-.91013,3.04765-2.47153,5.90001-3.23701,9.00584-.17434.70737-1.13487,2.75566.00207,2.99477,1.83812.38657,3.72134-2.48044,5.00346-3.48718,7.49386-5.88429,13.48157-8.81723,22.84084-4.36807.51409.24439,6.45182,3.44723,5.39312,4.35175l-5.99507-.49467c.65423,1.82102,2.07188,3.06424,2.73314,5.012,1.34045,3.94833.95589,6.28897-1.22479,9.74622-6.09229,9.65869-16.08162,9.17517-24.02156,2.00039-.86694-.7834-1.14377-1.80902-1.98454-2.25841.40325,3.48283,1.80162,6.94004,4.49278,9.2496-1.29023.36535-3.56753-1.34496-4.73543-2.26454-2.2913-1.80412-10.95797-11.34274-12.70022-11.73661-10.1005,1.88574-19.80423,5.37986-29.06008,9.75644-.48411,1.72451,2.23998-.09817,4.24839-.04775,10.03794.252,5.24792,10.13164.20783,14.24808-4.45348,3.63733-9.50128,3.41893-4.37221,10.45616,11.44068,15.69693,25.92549,8.16689,41.15913,8.84044,5.61308.24818,11.70422,1.69147,17.00062,3.49976l-3.59397-2.906c-6.03425-3.42253-12.98882-4.34301-19.64934-5.84608,8.19063-6.88856,19.62231-7.91714,29.49754-4.25722l-4.99981-5.99509h10.75c.21157,0,3.34016-1.3097,3.92892-1.57108,3.90333-1.73285,6.5007-4.62555,9.0736-7.92639.64415,2.80323,1.0098,5.71009,1.74748,8.49747l1.27143.86756c1.91462,8.5574,7.21161,15.11859,14.68755,19.38322,6.77991,14.39114,13.37968,17.77028,28.84499,14.81202l13.12354-3.43891c10.14768-3.65369,13.8257,5.13967,14.98955,13.5343,1.65749,11.95517,1.31809,23.57473.11878,35.65259,2.73102-13.15625,4.54709-28.7257.13993-41.79978-3.24533-9.62746-8.07388-11.6966-17.68254-9.21156-17.04534,5.95549-32.21915,8.57582-38.06482-13.07295-2.9778,3.42806-11.77981-8.59431-11.34308-9.59744.09877-.22686.24933-.43117.41468-.62904-3.2102-6.16371-2.61678-13.04951-4.13801-19.61199-.85822-3.70228-4.40633-11.54957-3.77088-15.00886.50127-2.72884,7.11368-8.23342,9.46058-10.07746,7.02517-5.51993,15.10619-9.50289,22.39195-14.62899-.68901-3.6133-1.2224-7.23608-.96362-10.94225.13769-1.97196,1.68798-6.41114,1.53797-7.45282-.21088-1.46439-7.64915-8.95511-7.01657-9.77183,3.56802-1.79608,27.67218-8.66962,28.4189-10.83548.23564-14.64155.61036-29.38542-2.91779-43.66771.63612-.65943,9.01127,6.3543,10.00454,7.24033,8.00627,7.14176,15.15213,15.70114,20.81726,24.79501l17.9308-2.03281,17.24952-.25048c8.93263-9.95398,15.86993-21.53703,21.24283-33.75213,2.57276,1.14853,13.84941,24.08946,15.48598,28.01403,4.45099,10.67364,8.01418,20.33817,5.02099,31.98791-.52771,2.05389-2.83749,6.66036-2.73822,8.21383.11247,1.76005,3.9541,6.88294,4.98376,8.78171Z"/>
  <g>
    <path class="cls-17" d="M310,83c.30658.0312.88267,1.0068,2.01262.27679.3167-1.2539,1.89715-2.96912,2.25043-3.80745.47044-1.11637-.41985-1.90281-.21775-2.64732.24906-.91747,2.29742-.7907,1.96859-2.57663-.05564-.30221-1.90836.11631-.02254-2.01823,2.72864.83179,1.79067.88868,1.50865,2.77285-.23579,1.5753-1.94849,8.33419-2.65171,9.35156-.59735.86422-6.37928,4.58999-7.85541,5.89132-1.05394.92913-6.97801,6.72032-6.91417,7.41468,17.56796,32.62147,22.16902,70.04057,26.91662,106.34199-.71595-.11984-.96124-.92339-1.26851-1.47648-5.80471-10.44864-5.39838-19.27596-7.31021-30.68969-5.29505-31.61173-12.17744-54.23113-27.41662-82.33338,3.75813.19712,2.24109.62562,3.25391,2.47874.25263.46222,2.62402,2.02809,2.24609.02126.50592-.34186.97117-.19895,1.46131-.02776,1.16169-1.34848,10.33027-9.87994,11.02411-9.64295.40294.13763.75549.30862,1.01458.67071Z"/>
    <path class="cls-23" d="M131.5,152c1.27462-3.82996-2.9202-8.32138,1.99498-10.99984l1.82818,13.50621,2.0501,4.37784.62675-.3842c1.17776,2.26134,6.86722,9.75339,9.33275,9.92603.83008.05812,1.34068-1.34765,2.18137-.69354.45939.35743,2.0797,5.55198,2.7147,6.78869,9.94771,19.37388,24.52028,6.88654,39.52555,5.4831,5.99728-.56092,8.88393.9592,11.8288,6.16255,6.13022,10.83162,5.04375,28.05039,3.33391,40.00026l-3.91202,18.83039c.1773-14.64997,2.82501-30.13283.93274-44.68529-.5067-3.89676-2.85704-15.20321-7.29301-16.20575-4.74081-1.07143-15.78666,3.12049-21.13993,4.14844-12.76188,2.45055-19.33453.54529-26.40629-10.60346-.83614-1.31818-1.32019-3.45433-2.08398-4.41602-.84001-1.05767-3.51955-2.18204-4.7537-3.2463-6.40305-5.5216-8.60952-9.86-10.76091-17.98909Z"/>
    <path class="cls-23" d="M403,178.5l-1.99621.49365c2.40503.61057,4.90455.80845,7.31094,1.44162,2.23517.58812,7.61163,1.61573,2.68527,4.06473-12.55385-4.24843-30.92121-6.51309-37.76447,7.48553-7.64761,15.64402-2.00097,35.39151,4.67048,50.35841,1.413,3.16996,3.24582,3.43462,1.13754,7.44385-.26575.50537.26638.9546-1.0359.71034-5.88371-11.36747-11.68608-22.62433-12.52859-35.7272-1.73238-26.94231,10.00403-41.17784,37.52093-36.27093Z"/>
    <path class="cls-14" d="M269.49962,29.50484c-1.66452,8.50962-4.34927,16.89222-8.98567,24.25911-2.53594,4.02942-8.56987,10.16728-8.52626,15.00076.02301,2.54974,6.76233,8.07232,8.76937,10.22822,1.05118,1.12915,3.80725,5.72122,5.25609,5.31649,3.85289-1.07628,10.71284-13.19009,11.14939-17.39688l1.83247-9.41013c2.58721,13.79509-1.65913,25.56549-12.95727,33.80928,9.15123,13.50461,10.57598,30.67843,6.21143,46.18748-.34102,1.2118-2.90047,9.14535-3.25634,9.49957-1.88529,1.87651-.07207-2.51702-.01356-2.76965,2.57467-11.11718,2.01241-23.18589-3.72927-33.23415-3.37141,9.64307-12.58033,18.26337-22.77977,11.21335-5.19534,4.08773-11.1173,7.38422-17.47004,9.29829.5735,2.28827,2.55693,3.94218,3.51324,6.22997,1.09788,2.62647,1.39777,5.50906,1.98189,8.263-3.83045-4.51926-5.76769-9.72306-11.7257-12.01948-9.91001-3.81966-19.11273,7.52726-25.26716,13.77236l6.56795-2.43202c6.65485-1.25258,14.82293-1.3813,19.14818,4.71098,1.28388,1.80839,4.70396,10.40972,3.56581,11.99954-.79964,1.11698-23.57045,5.39686-26.78192,5.96396l8.00663-4.23578c4.62925-1.64878,9.04047-4.02615,13.95261-4.79488-.28827-9.46281-8.16007-10.7422-15.97265-8.72516-13.8221,3.56856-16.45792,15.92047-33.49859,6.52043-2.1312-1.17562-7.50719-4.79968-9.00413-6.49583-1.26339-1.43151,1.41493-2.10621,2.74826-3.27942,4.5163-3.97394,8.18101-8.50454,8.75732-14.74229.59086-6.39522.95521-11.47189-6.22252-13.26139l-16.76571-3.9743c.82712-.1205,1.62819-.48651,2.33786-.91518,6.74344-4.07332,16.95957-11.39593,23.8131-14.18639,3.74127-1.52328,5.95182-.8988,9.60374.08693,6.59257,1.77948,13.72071,5.57741,17.24803,11.50449.86332.13397.41104-.58893.35429-1.09885-.21023-1.88913-.80354-3.69364-.88406-5.62575-.02304-.55281-.33674-2.35988.5182-2.26897,1.82234,9.32586,13.44896,15.31517,22.50272,12.99246l-4.47559-1.26746-2.01828-1.22126c9.14098-1.28575,14.14647-9.66498,13.00136-18.50378l1.86472,4.8781c.53564,4.1087.27944,7.69983-2.86961,10.61448,2.7741-.34946,4.74218-3.74925,5.59389-6.15101,2.97237-8.38183-1.21259-17.97688-10.59148-18.84926.05712-.70357,2.25468-.87992,2.81034-.93236,1.72545-.16285,3.52007.18989,5.18452-.30996-7.07465-6.24574-19.75132-4.53724-26.27085,1.7241-1.97242,1.89431-4.07572,6.09233-6.04959,7.45041-2.53926,1.74707-6.74242,1.58362-9.67936,1.57466.3631-10.28045,7.93024-17.99301,14.50226-24.99665-7.53313,1.62489-15.0707,8.08059-18.24145,15.00345-.81215,1.7732-2.55751,9.88708-3.06394,10.02151-.8005.21249-2.25227-.18837-3.19649-.03065l.99691-9.49926c-2.86821,1.69292-5.76377,9.54821-9.63427,8.41485-2.57977-.75541-2.60889-4.78508-2.1148-6.92143,1.67208-7.22973,20.35728-21.98693,27.09116-25.40645,12.11555-6.15238,29.78349-7.1675,43.16282-7.08204l-5.49755,4.24245,11.37861,3.67531,1.10214-.15314c5.66081-6.44491,11.17736-13.01572,15.72466-20.31189,2.21651-3.5564,3.9378-7.37908,6.04871-10.97064.38067-.64768-.08913-1.26187,1.24319-.98224Z"/>
    <path class="cls-1" d="M260.50237,237.99726c-.46225-.4899,4.34394-10.9899,3.25016-12.99469-21.51449,17.57457-47.36783,34.1276-56.25883,61.99371-.98226.10181-.29192-.97047-.24454-1.49281.59469-6.55534,1.76047-13.16433,3.50179-19.5025,8.33518-30.33884,30.4852-54.85333,34.75424-86.49834l1.74954,5.49262c4.16411,16.99565-4.6265,33.65451-14.25467,46.99972,8.28023-2.15462,15.68709-7.58527,22.0069-13.238,10.28601-9.20029,18.80463-20.56889,25.2639-32.73525.41753-.78644,1.70185-5.52141,2.21165-2.7639.97494,5.27346,1.20806,12.14568,1.04818,17.52252-.04512,1.51722-1.19849,2.5374.46159,2.21785,6.27347-13.27476,9.99821-27.60677,11.52866-42.22724l-.52722-13.76724c3.62498,7.11812,5.36913,14.41103,6.43535,22.31722.77785,5.76792,1.53288,13.22453,1.52144,18.98269-.0044,2.2122-.2656,8.80326-.78705,10.60984-.66878,2.31706-8.30093,10.79672-10.40648,13.09352-6.72382,7.33454-15.02734,15.08852-23.09974,20.90026-.84547.6087-7.77049,5.49739-8.15487,5.09002Z"/>
    <path class="cls-4" d="M304.5,221c1.05076-.40909,1.38409-.24242,1,.5-6.26406,5.62974-13.43968,13.67501-18.01051,20.73949-1.24953,1.93121-2.60701,4.13635-3.48706,6.25784.61654.56698,8.63476-5.01759,9.98686-5.75803,10.40971-5.70057,21.08804-9.39047,33.19992-8.17851,3.34427.33464,8.7408,1.80582,11.31064,3.93422-35.27411,2.75678-68.51528,32.85378-74.00588,68.0038-5.54313-7.18958-8.02609-16.52094-6.26948-25.5243.73798-3.78244,2.39495-6.94379,3.77059-10.47432-18.14464,7.23546-31.87869,22.56588-38.37513,40.86977l-2.61488,10.12753c-2.03276-41.95816,33.59916-71.99889,66.34453-91.39787,5.57873-3.30495,11.27248-6.39125,17.15039-9.09961Z"/>
    <path class="cls-8" d="M169.49524,260.49716l-2.08291-3.65948c-7.12567-16.48123-8.58163-34.76006-15.40745-51.33747,13.00205,14.76165,15.73178,36.05894,17.49035,54.99695Z"/>
    <path class="cls-18" d="M195.5,290.5c.30597,1.02132.1393,1.35466-.5,1-8.9865-13.73233-12.69704-24.41359-11.51924-41.26924.14952-2.13975,1.47759-10.63494,2.26192-12.23813.11354-.23209.64951-.6334.75233-.49249.33659,11.47318,1.9013,23.35014,4.15099,34.60387,1.20172,6.01142,2.65624,12.68377,4.85401,18.39599Z"/>
    <path class="cls-16" d="M188.99983,320.99507l-8.73482-6.01007c-8.80027-7.98024-16.22997-17.96414-18.26016-29.98473,8.86406,12.08976,16.65282,25.05742,26.99499,35.99481Z"/>
    <path class="cls-16" d="M340.5,207.25c.97465-9.21753,9.99974-21.79537,17.55325-26.9466.24137-.1646,1.31226-1.08569,1.45161-.54851-6.0948,7.29769-10.94937,15.23892-14.3786,24.12137-1.47642,3.82426-2.46347,7.84934-3.77904,11.72623-.18018.53097-.10832,1.50952-.84722,1.39752.23787-3.1328-.32522-6.67429,0-9.75Z"/>
    <path class="cls-19" d="M161.9996,130.00147c-2.63492.6027-3.27703-1.44969-5.1537-2.59736-4.42839-2.70816-10.48941-2.19755-14.11197,1.57851-.85338.88954-1.88487,3.94899-2.74538,2.73335-1.41673-2.00141,3.2421-5.96262,4.8475-7.12993,3.95703-2.87721,7.29893-3.3295,11.93796-1.61,3.06189,1.13492,5.80844,3.47695,5.2256,7.02543Z"/>
    <path class="cls-11" d="M168.75,169c-2.99178-.25903-7.91832-1.38883-10.4165-3.08353-1.97751-1.34149-3.55397-2.84694-.08247-2.9605,2.12761-.0696,17.49128,2.97852,18.15854,4.12919.28335.48863.01827,1.31877.09043,1.91484-2.52239-.15645-5.25654.21588-7.75,0Z"/>
    <path class="cls-7" d="M190.50196,55.49682c1.45232-7.29315-.21636-14.78725-1.49721-21.99397l3.6363,9.6061c.56096,4.0987,3.96448,11.22396-2.13909,12.38787Z"/>
    <path class="cls-15" d="M259.49491,177.4975l-3.78714-6.95527-3.70769-5.03721c5.87446.70165,7.8543,6.80599,7.49483,11.99248Z"/>
    <path class="cls-13" d="M58.99991,181.99496c-4.38982.72664-6.76813-3.19987-7.49757-6.99219.94119-.21737,1.185.53164,1.74862.99641,2.08833,1.72205,3.92715,3.9987,5.74895,5.99578Z"/>
    <path class="cls-24" d="M147.4948,157.49761l-1.85257-4.38979c-.66267-2.99815-1.74234-5.99739-1.63706-9.1054l1.8527,4.88967,1.63692,8.60552Z"/>
    <path class="cls-6" d="M304.5,221c.96454-.44443,1.9827-1.85039,3.49992-1.49498-.1639,1.30912-2.11075,1.64521-2.49992,1.99498l-1-.5Z"/>
    <path class="cls-3" d="M195.5,290.5c.33977.88311,1.29407,1.75383.99497,2.99993-1.14296-.16887-1.15254-1.47666-1.49497-1.99993l.5-1Z"/>
    <g>
      <path class="cls-22" d="M213.87407,89.11735c10.4707-1.50763,14.76212,16.67737,2.83295,18.3367-13.37766,1.86081-14.9552-16.59126-2.83295-18.3367Z"/>
      <circle class="cls-12" cx="215.28756" cy="98.00806" r="3.56988"/>
    </g>
    <path class="cls-10" d="M47.49398,147.99881c-1.31033-.49621-.89952-2.18886-1.54497-3.19813-1.5348-2.3999-5.07437-1.06118-6.94395.19927,1.33729-6.36935,11.53643-3.82595,8.48893,2.99886Z"/>
    <g>
      <path class="cls-21" d="M331.5,148c-4.10105-5.63931-7.569-11.16902-9.17085-18.07915-2.52112-10.87574-1.06508-21.26452,1.68608-31.90841,6.63917,2.26199,19.52126-1.57989,21.2889-9.01266.18842-.7923-3.06409-6.33394-3.68536-7.86854-3.49227-8.62616-3.26847-14.88606-.47785-23.74032.56504-1.79278,1.29421-4.2521,2.85908-5.39092v11.25c0,1.88075,1.45229,7.36061,2.12054,9.37946.49078,1.48267,4.63847,10.32039,5.62665,10.31705,2.73971-2.04432,6.39818-3.26899,9.75229-3.95188.24035-.23702-3.71975-5.30011-2.99707-5.99212,14.47356.71025,27.31739,5.09613,39.45524,12.78983,3.18831,2.02094,13.38136,9.2196,14.66234,12.33398,1.15465,2.80726-1.2854,7.57576-3.0952,6.35257-.22186-.14995-1.59625-3.55936-2.53691-4.71677-1.22896-1.51214-2.81504-2.7705-4.48295-3.76195.49533,2.25966,4.63684,9.38505.74929,9.54245-4.77161.1932-12.70388-9.6199-20.22905-10.81829-5.00847-.79761-14.94188.46607-16.52245,6.27327,3.10199-1.09261,5.72357-1.50974,8.99723-.99273-6.58795,4.42352-7.76567,12.17912-3.59671,18.84189,5.01607,8.0166,16.39014,7.82307,22.09171.6533-.12536,3.50835-2.08112,6.9157-4.99265,8.7522,2.88566.36157,6.18692-2.80077,7.98681-5.01316,2.73677-3.36397,4.38274-7.31922,4.01363-11.73688,3.84459,1.59789,6.76314.02682,10.24053-.0376,4.36364-.08084,17.32529,4.76185,22.01547,6.52662,4.49239,1.69036,8.70025,3.96648,13.23756,5.515-.16543,1.11419-2.17288.03099-3.11234.123-11.65833,1.14181-5.5452,10.2181-.11912,14.8559,1.70251,1.45518,6.37318,3.76722,7.22992,4.77048,1.54093,1.80448-3.10413,7.88256-4.50981,9.4793-16.11052,18.30033-34.59912,2.76429-49.52724-6.44266-7.82917-4.82866-8.7069-3.8513-17.1497-5.3503-3.27661-.58176-8.12987-2.28945-11.0761-2.45223-3.45272-.19076-7.55949.79849-11.47557.50387-11.18085-.84116-24.15994-7.93373-27.76171-18.99312-.15182-.15914-.99462.64584-.99462.74949v14c0,2.53275,2.73601,10.28284,4,12.75.46927.73533.28664.97778-.5.5Z"/>
      <path class="cls-9" d="M410.50088,163.00503c.13954.13163.22655,1.38914-.63138.88544-11.8986-1.12107-23.95887-1.28246-35.86938-.39549,6.65988-7.10224,18.89483-5.3545,27.50215-3.24724,1.10906.27152,8.6563,2.4344,8.99861,2.7573Z"/>
      <path class="cls-5" d="M440.99694,166.50208c1.36036,1.47637-7.12204,9.70522-9.37209,7.38545-3.13166-3.22869,7.21231-7.05702,9.37209-7.38545Z"/>
      <path class="cls-2" d="M457.49734,135.99755c-1.15907.22201-1.4212-1.12145-2.3463-1.3951-3.52894-1.04387-6.20621.87009-6.65705,4.39638-1.38205-.50383-1.15749-3.00901-.95991-4.21917.79951-4.89706,10.15636-4.32025,9.96327,1.21789Z"/>
      <path class="cls-20" d="M332,147.5c.29728.58026,2.58869,2.8269,1.99509,3.49981-1.41073-.48278-1.79367-2.0353-2.49509-2.99981l.5-.5Z"/>
    </g>
  </g>
</svg>
""";
    // SVG de información con color PrimaryColor
    private static readonly string InfoSvg = """
        <svg xmlns="http://www.w3.org/2000/svg" shape-rendering="geometricPrecision" text-rendering="geometricPrecision" image-rendering="optimizeQuality" fill-rule="evenodd" clip-rule="evenodd" viewBox="0 0 512 512">
            <path fill="#F5BA00" d="M256 0c70.689 0 134.692 28.656 181.02 74.98C483.344 121.308 512 185.311 512 256c0 70.689-28.656 134.692-74.98 181.016C390.692 483.344 326.689 512 256 512c-70.689 0-134.692-28.656-181.016-74.984C28.656 390.692 0 326.689 0 256S28.656 121.308 74.984 74.98C121.308 28.656 185.311 0 256 0zm-8.393 139.828c5.039-12.2 17.404-20.536 30.609-20.536 18.611 0 32.717 15.259 32.717 33.478 0 4.53-.796 8.776-2.407 12.704-6.902 16.91-26.09 25.405-43.082 18.302-16.871-7.122-24.821-27.096-17.837-43.948zm12.103 206.605c-.833 2.984-2.256 7.946-.674 10.725 4.22 7.45 16.459-6.058 19.036-8.97 8.307-9.414 15.461-20.475 21.905-31.229a1.506 1.506 0 012.061-.523l13.44 9.972c.641.473.789 1.363.367 2.03-6.18 10.743-12.426 20.124-18.744 28.129-10.452 13.234-23.595 25.852-39.583 32.065-9.918 3.842-22.817 5.363-34.144 2.829-10.506-2.353-19.66-8.206-23.822-18.946-5.464-14.092-.97-30.105 3.33-43.887l21.689-65.697c2.962-10.647 10.044-29.661-8.25-29.661H197.36c-1.56 0-1.596-1.402-1.297-2.484l4.858-17.685a1.5 1.5 0 011.463-1.103l96.89-3.038c1.409-.05 1.701 1.19 1.374 2.286L259.71 346.433z"/>
        </svg>
        """;

    // SVG de estadísticas con color PrimaryColor
    private static readonly string StatsSvg = """
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 122.88 106.5">
            <path fill="#F5BA00" fill-rule="evenodd" d="M19.39,64.84v39.84a1.84,1.84,0,0,1-1.83,1.82H1.83A1.83,1.83,0,0,1,0,104.68V64.84ZM0,51.83,41.59,15.44c9.21,9,18.14,19.93,27.25,28.93L102.07,11,91.37.28,122.88,0V31.78L112.61,21.51c-7.37,7.47-24.8,23.92-32.17,31.3-9.33,9.32-13.78,9.49-23.1.17L41.59,35.46,23.13,51.83ZM114.37,38.69v66a1.84,1.84,0,0,1-1.82,1.82H96.81A1.84,1.84,0,0,1,95,104.68V57.29c3-2.91,6.5-6.29,10.07-9.73l7.45-7.17a24.16,24.16,0,0,1,1.87-1.7ZM82.71,68.34v36.34a1.84,1.84,0,0,1-1.83,1.82H65.15a1.84,1.84,0,0,1-1.83-1.82V72.22a22.48,22.48,0,0,0,5.73.63,24,24,0,0,0,13.66-4.51Zm-31.66-3v39.29a1.84,1.84,0,0,1-1.83,1.82H33.48a1.83,1.83,0,0,1-1.82-1.82V62q.48-.36.93-.75l7.86-7,6.34,7,.49.51q1.92,1.93,3.77,3.52Z"/>
        </svg>
        """;

    // SVG de información del video con color PrimaryColor
    private static readonly string VideoInfoSvg = """
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path fill="#F5BA00" d="M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z"/>
                            </svg>
                            """;

    public void Compose(IDocumentContainer container)
    {
        // Registrar fuentes Heebo antes de generar el documento
        FontConfiguration.RegisterFonts();

        container
            .Page(page =>
            {
                page.Size(PageSizes.A4);
                page.Margin(30);
                page.DefaultTextStyle(x => x.FontSize(10).FontColor(Colors.Grey.Darken2).FontFamily("Heebo", "Arial", "sans-serif")); 

                page.Header().Element(ComposeHeader);
                page.Content().Element(ComposeContent);
                page.Footer().Element(ComposeFooter);
            });
    }

    private void ComposeHeader(IContainer container)
    {
        container.Column(column =>
        {
            // Logo y título principal
            column.Item().Row(row =>
            {
                row.ConstantItem(60).Container()
                    .Width(50)
                    .Height(50)
                    .Svg(LogoSvg);

                row.ConstantItem(20);

                row.RelativeItem().Column(titleColumn =>
                {
                    titleColumn.Item().Text("CERBERUS")
                        .FontSize(18)
                        .Bold();

                    titleColumn.Item().Text("Informe de vigiliancia y seguridad")
                        .FontSize(14)
                        .Medium()
                        .FontColor(PrimaryColor);
                        
                    titleColumn.Item().Height(5);
                    
                    titleColumn.Item().Text($"Ubicación: {run.RootLocationId}")
                        .FontSize(11)
                        .FontColor(Colors.Grey.Darken1);
                });

                row.ConstantItem(140).AlignRight().Column(metaColumn =>
                {
                    metaColumn.Item().Container()
                        .Border(1)
                        .BorderColor(Colors.Grey.Lighten1)
                        .Background(LightGray)
                        .Padding(8)
                        .Column(metaInfo =>
                        {
                            metaInfo.Item().Text("INFORMACIÓN DEL DOCUMENTO")
                                .FontSize(8)
                                .Bold()
                                .FontColor(NeutralGray);
                            
                            metaInfo.Item().Height(5);
                            
                            metaInfo.Item().Text($"Fecha de ejecución:")
                                .FontSize(8)
                                .FontColor(Colors.Grey.Darken1);
                            metaInfo.Item().Text(FormatInstant(run.StartedAt, "dd/MM/yyyy"))
                                .FontSize(9)
                                .Bold();
                            
                            metaInfo.Item().Height(3);
                            
                            metaInfo.Item().Text($"Generado el:")
                                .FontSize(8)
                                .FontColor(Colors.Grey.Darken1);
                            metaInfo.Item().Text($"{SystemClock.Instance.GetCurrentInstant():dd/MM/yyyy HH:mm}")
                                .FontSize(9)
                                .Bold();
                        });
                });
            });

            column.Item().Height(20);
            column.Item().Height(1).Background(Colors.Grey.Darken2);
            column.Item().Height(15);
        });
    }

    private void ComposeContent(IContainer container)
    {
        container.Column(column =>
        {
            column.Item().Element(ComposeExecutiveSummary);
            
            column.Item().Height(25);
            foreach (var (inspection, index) in run.InspectionRuns.Select((insp, idx) => (insp, idx)))
            {
                //Saltos de página para separar secciones
                column.Item().PageBreak();
                column.Item().Element(c => ComposeInspectionDetail(c, inspection));
                column.Item().Height(20);
            }
        });
    }

    private void ComposeExecutiveSummary(IContainer container)
    {
        container.Column(column =>
        {
            // Título con línea decorativa
            column.Item().Row(row =>
            {
                row.ConstantItem(4).Height(20).Background(PrimaryColor);
                row.ConstantItem(15);
                row.RelativeItem().Text("RESUMEN EJECUTIVO")
                    .FontSize(16)
                    .Bold();
            });

            column.Item().Height(20);

            // Cards con información mejorada
            column.Item().Row(row =>
            {
                row.RelativeItem().Element(ComposeBasicInfoCard);
                row.ConstantItem(20);
                row.RelativeItem().Element(ComposeStatsCard);
            });

            column.Item().Height(25);
            column.Item().Element(ComposeInspectionsSummary);
        });
    }

    private void ComposeBasicInfoCard(IContainer container)
    {
        container.Decoration(decoration =>
        {
            decoration.Before()
                .Background(OrangeAccentColor)
                .Height(6);
                
            decoration.Content()
                .Border(1)
                .BorderColor(PrimaryColor)
                .Background(Colors.White)
                .Height(180)
                .Padding(20)
                .Column(column =>
                {
                    column.Item().Row(row =>
                    {
                        row.ConstantItem(24).Container()
                            .Width(20)
                            .Height(20)
                            .Svg(InfoSvg); // SVG de información mejorado

                        row.ConstantItem(10);
                        
                        row.RelativeItem().Text("INFORMACIÓN GENERAL")
                            .FontSize(12)
                            .Bold()
                            .FontColor(PrimaryColor);
                    });

                    column.Item().Height(15);

                    var shortId = run.Id.Length > 12 ? run.Id.Substring(0, 12) + "..." : run.Id;
                    
                    AddInfoRow(column, "ID de Ejecución:", shortId);
                    AddInfoRow(column, "Ubicación:", run.RootLocationId ?? "N/A");
                    AddInfoRow(column, "Hora de Inicio:", FormatInstant(run.StartedAt, "dd/MM/yyyy HH:mm:ss"));
                    AddInfoRow(column, "Hora de Finalización:", FormatInstant(run.EndedAt, "dd/MM/yyyy HH:mm:ss"));
                    AddInfoRow(column, "Estado:", GetStatusInSpanish(run.Status.ToString()));
                });
            });
        }

    private void ComposeStatsCard(IContainer container)
    {
        var totalInspections = run.InspectionRuns?.Count() ?? 0;
        var anomalousInspections = run.InspectionRuns?.Count(i => 
            i.OperationRun.Answers?.Any(a => a.Answer?.IsAnomalous == true) == true) ?? 0;
        var normalInspections = totalInspections - anomalousInspections;
        var successRate = totalInspections > 0 ? (normalInspections * 100.0 / totalInspections) : 0;

        container.Decoration(decoration =>
        {
            decoration.Before()
                .Background(OrangeAccentColor)
                .Height(6);

            decoration.Content()
                .Border(1)
                .BorderColor(PrimaryColor)
                .Background(Colors.White)
                .Height(180)
                .Padding(20)
                .Column(column =>
                {
                    column.Item().Row(row =>
                    {
                        row.ConstantItem(24).Container()
                            .Width(20)
                            .Height(20)
                            .Svg(StatsSvg); // SVG de estadísticas mejorado

                        row.ConstantItem(10);
                        
                        row.RelativeItem().Text("ESTADÍSTICAS DE EJECUCIÓN")
                            .FontSize(12)
                            .Bold()
                            .FontColor(PrimaryColor);
                    });

                    column.Item().Height(15);

                    AddInfoRow(column, "Total de Inspecciones:", totalInspections.ToString());
                    AddInfoRow(column, "Inspecciones Exitosas:", $"{normalInspections} ({successRate:F1}%)");
                    AddInfoRow(column, "Anomalías Detectadas:", anomalousInspections.ToString());
                    AddInfoRow(column, "Tiempo Total de Ejecución:", CalculateDuration(run.StartedAt, run.EndedAt));
                });
        });
    }

    private void ComposeInspectionsSummary(IContainer container)
    {
        container.Column(column =>
        {
            column.Item().Row(row =>
            {
                row.ConstantItem(4).Height(20).Background(PrimaryColor);
                row.ConstantItem(15);
                row.RelativeItem().Text("DETALLE DE INSPECCIONES")
                    .FontSize(14)
                    .Bold();
            });

            column.Item().Height(15);

            // Tabla con headers
            column.Item().Container()
                .Border(1)
                .BorderColor(Colors.Grey.Lighten1)
                .Column(tableColumn =>
                {
                    // Header
                    tableColumn.Item().Background(LightGray)
                        .Border(1)
                        .BorderColor(Colors.Grey.Lighten1)
                        .Padding(12)
                        .Row(headerRow =>
                        {
                            headerRow.ConstantItem(40).Text("#")
                                .FontSize(10)
                                .Bold()
                                .FontColor(NeutralGray);
                            
                            headerRow.RelativeItem(3).Text("CÁMARA")
                                .FontSize(10)
                                .Bold()
                                .FontColor(NeutralGray);
                            
                            headerRow.RelativeItem(2).Text("DURACIÓN")
                                .FontSize(10)
                                .Bold()
                                .FontColor(NeutralGray);
                            
                            headerRow.RelativeItem(2).Text("HORA")
                                .FontSize(10)
                                .Bold()
                                .FontColor(NeutralGray);
                            
                            headerRow.RelativeItem(2).Text("ESTADO")
                                .FontSize(10)
                                .Bold()
                                .FontColor(NeutralGray);
                        });

                    // Filas de datos
                    foreach (var (inspection, index) in run.InspectionRuns.Select((insp, idx) => (insp, idx)))
                    {
                        var hasAnomaly = inspection.OperationRun.Answers?.Any(a => a.Answer?.IsAnomalous == true) ?? false;
                        var anomalyCount = hasAnomaly ? inspection.OperationRun.Answers?.Count(a => a.Answer?.IsAnomalous == true) : 0;
                        var (statusColor, statusText) = hasAnomaly ? 
                            (anomalyCount > 1 ? (DangerColor, "Crítico") : (WarningColor, "Advertencia")) : 
                            (SuccessColor, "Normal");

                        var bgColor = index % 2 == 0 ? Colors.White : LightGray;

                        tableColumn.Item().Background(bgColor)
                            .Border(1)
                            .BorderColor(Colors.Grey.Lighten2)
                            .Padding(12)
                            .Row(row =>
                            {
                                row.ConstantItem(40).Text($"{index + 1:00}")
                                    .FontSize(11)
                                    .Medium()
                                    .FontColor(DarkBlue);

                                row.RelativeItem(3).Text(inspection.CameraDescription)
                                    .FontSize(10)
                                    .FontColor(Colors.Grey.Darken2);
                                
                                row.RelativeItem(2).Text(CalculateDuration(inspection.StartedAt, inspection.EndedAt))
                                    .FontSize(10)
                                    .FontColor(Colors.Grey.Darken1);
                                
                                row.RelativeItem(2).Text(FormatInstant(inspection.StartedAt, "HH:mm:ss"))
                                    .FontSize(10)
                                    .FontColor(Colors.Grey.Darken1);

                                row.RelativeItem(2).Container()
                                    .Background(statusColor)
                                    .PaddingVertical(4)
                                    .PaddingHorizontal(6)
                                    .AlignCenter()
                                    .Text(statusText)
                                    .FontSize(8)
                                    .FontColor(Colors.White)
                                    .Bold();
                            });
                    }
                });
        });
    }

    private void ComposeInspectionDetail(IContainer container, InspectionRun inspection)
    {
        container.Column(column =>
        {
            // Título de sección con el mismo estilo que "DETALLE DE INSPECCIONES"
            column.Item().Row(row =>
            {
                row.ConstantItem(4).Height(20).Background(PrimaryColor);
                row.ConstantItem(15);
                row.RelativeItem().Text(text =>
                {
                    text.Span("INSPECCIÓN DETALLADA")
                        .FontSize(14)
                        .Bold();
                    text.Span($" - {inspection.CameraDescription}")
                        .FontSize(14)
                        .Bold()
                        .FontColor(Colors.Grey.Darken1);
                });
            });

            column.Item().Height(20);

            // Card de información del video - ancho completo
            column.Item().Element(c => ComposeVideoInfoCard(c, inspection));

            column.Item().Height(20);

            // Sección de respuestas
            column.Item().Element(c => ComposeAnswersSection(c, inspection));
        });
    }

    private void ComposeVideoInfoCard(IContainer container, InspectionRun inspection)
    {
        container.Decoration(decoration =>
        {
            decoration.Before()
                .Background(OrangeAccentColor)
                .Height(6);

            decoration.Content()
                .Border(1)
                .BorderColor(PrimaryColor)
                .Background(Colors.White)
                .Height(120)
                .Padding(20)
                .Column(column =>
                {
                    column.Item().Row(row =>
                    {
                        row.ConstantItem(24).Container()
                            .Width(20)
                            .Height(20)
                            .AlignMiddle() 
                            .Svg(VideoInfoSvg);

                        row.ConstantItem(10);

                        row.RelativeItem().Container()
                            .AlignMiddle()
                            .Text("INFORMACIÓN DEL VIDEO")
                            .FontSize(12)
                            .Bold()
                            .FontColor(PrimaryColor);
                    });

                    column.Item().Height(15);

                    // Dos columnas de información
                    column.Item().Row(row =>
                    {
                        // Columna izquierda
                        row.RelativeItem().Column(leftColumn =>
                        {
                            AddInfoRow(leftColumn, "Inicio:", FormatInstant(inspection.StartedAt, "HH:mm:ss"));
                            AddInfoRow(leftColumn, "Finalización:", FormatInstant(inspection.EndedAt, "HH:mm:ss"));
                        });

                        row.ConstantItem(40); // Espacio entre columnas

                        // Columna derecha
                        row.RelativeItem().Column(rightColumn =>
                        {
                            AddInfoRow(rightColumn, "Cámara:", inspection.CameraDescription);
                            AddInfoRow(rightColumn, "Duración:", CalculateDuration(inspection.StartedAt, inspection.EndedAt));
                        });
                    });
                });
    }
    );
    }

    private void ComposeAnswersSection(IContainer container, InspectionRun inspection)
    {
        container.Column(column =>
        {
            column.Item().Text("RESPUESTAS DE LA INSPECCIÓN")
                .FontSize(12)
                .Bold()
                .FontColor(PrimaryColor);

            column.Item().Height(10);

            column.Item().Text($"{inspection.OperationRun.Description}")
                .FontSize(10)
                .Bold();

            column.Item().Height(10);
            column.Item().Height(1).Background(Colors.Grey.Darken2);
            column.Item().Height(8);

            column.Item().Container()
                .Background(LightBlue)
                .Padding(15)
                .Column(contentColumn =>
                {
                    foreach (var (answer, index) in inspection.OperationRun.Answers.Select((a, i) => (a, i)))
                    {
                        if (index > 0)
                        {
                            contentColumn.Item().Height(8);
                        }
                        
                        contentColumn.Item().Element(c => ComposeQuestionAnswer(c, answer));
                    }

                    if (!string.IsNullOrEmpty(inspection.OperationRun?.AdditionalComments))
                    {
                        contentColumn.Item().Height(15);
                        contentColumn.Item().Text("Comentarios Adicionales:")
                            .FontSize(10)
                            .SemiBold()
                            .FontColor(Colors.Grey.Darken2);
                        
                        contentColumn.Item().Height(5);
                        
                        contentColumn.Item().Border(0.5f)
                            .BorderColor(Colors.Grey.Medium)
                            .Background(Colors.White)
                            .Padding(8)
                            .Text(inspection.OperationRun.AdditionalComments)
                            .FontSize(9);
                    }
                });
        });
    }

    private void ComposeQuestionAnswer(IContainer container, OperationRunQuestionAnswer answer)
    {
        container.Column(column =>
        {
            column.Item().Row(row =>
            {
                row.RelativeItem().Text(GetQuestionText(answer.Question))
                    .FontSize(10)
                    .Bold()
                    .FontColor(Colors.Black);

                if (answer.Answer?.IsAnomalous == true)
                {
                    row.ConstantItem(70).AlignRight().Container()
                        .Background(DangerColor)
                        .Padding(3)
                        .Text("ANOMALÍA")
                        .FontSize(7)
                        .FontColor(Colors.White)
                        .Bold();
                }
            });

            column.Item().Height(3);

            column.Item().Border(0.5f)
                .BorderColor(Colors.Grey.Medium)
                .Background(Colors.White)
                .Padding(6)
                .Text(GetAnswerValue(answer.Answer))
                .FontSize(9)
                .FontColor(answer.Answer?.IsAnomalous == true ? Colors.Red.Medium : Colors.Grey.Darken2)
                .Bold();

            if (answer.Answer?.Actions?.Any() == true)
            {
                column.Item().Height(5);
                column.Item().Text("Acciones:")
                    .FontSize(9)
                    .SemiBold()
                    .FontColor(Colors.Grey.Darken2);

                column.Item().Height(5);
                foreach (var action in answer.Answer.Actions)
                {
                    column.Item().Element(c => ComposeActionItem(c, action, 0));
                }
            }
        });
    }

    private void ComposeActionItem(IContainer container, OperationActionExecution action, int level)
    {
        var leftMargin = level * 15;

        container.PaddingLeft(leftMargin).Column(column =>
        {
            column.Item()
                .Background(SuperLightGray)
                .Padding(6)
                .Column(actionColumn =>
                {
                    // Título de la acción con estado
                    actionColumn.Item().Row(row =>
                    {
                        row.RelativeItem().Text($"{action.Action.Description}")
                            .FontSize(9)
                            .Bold()
                            .FontColor(Colors.Black);

                        var (statusColor, statusText) = action.Executed == true ? 
                            (SuccessColor, "EJECUTADA") : 
                            (DangerColor, "NO EJECUTADA");

                        row.ConstantItem(80).AlignRight().Container()
                            .Background(statusColor)
                            .Padding(3)
                            .Text(statusText)
                            .FontSize(7)
                            .FontColor(Colors.White)
                            .Bold();
                    });

                    actionColumn.Item().Height(3);

                    if (!string.IsNullOrEmpty(action.Comments))
                    {
                        actionColumn.Item().Text("Comentarios:")
                            .FontSize(9)
                            .Bold()
                            .FontColor(Colors.Grey.Darken1);
                        
                        actionColumn.Item().Text(action.Comments)
                            .FontSize(8)
                            .FontColor(Colors.Grey.Darken3);
                    }
                });

            if (action.Alternatives?.Any() == true)
            {
                foreach (var alternative in action.Alternatives)
                {
                    column.Item().Height(10);
                    column.Item().Element(c => ComposeActionItem(c, alternative, level + 1));
                    column.Item().Height(10);

                }
            }
        });
    }

    private void ComposeFooter(IContainer container)
    {
        container.Row(row =>
        {
            row.RelativeItem().Text($"© {DateTime.Now.Year} Cerberus Surveillance System")
                .FontSize(8)
                .FontColor(Colors.Grey.Medium);
                
            row.RelativeItem().AlignCenter().Text("DOCUMENTO CONFIDENCIAL")
                .FontSize(8)
                .Bold()
                .FontColor(NeutralGray);
                
            row.RelativeItem().AlignRight().Text(text =>
            {
                text.Span("Página ").FontSize(8).FontColor(Colors.Grey.Medium);
                text.CurrentPageNumber().FontSize(8).Bold();
                text.Span(" de ").FontSize(8).FontColor(Colors.Grey.Medium);
                text.TotalPages().FontSize(8).Bold();
            });
        });
    }

    // Helper methods mejorados
    private static void AddInfoRow(ColumnDescriptor column, string label, string value)
    {
        column.Item().Row(row =>
        {
            row.RelativeItem(3).Text(label)
                .FontSize(9)
                .Medium()
                .FontColor(NeutralGray);
            row.RelativeItem(4).Text(value)
                .FontSize(10)
                .Bold()
                .FontColor(Colors.Grey.Darken2);
        });
        column.Item().Height(6);
    }

    private static string GetQuestionText(IOperationQuestion question)
    {
        return question switch
        {
            OptionsQuestion opt => opt.Text,
            TextQuestion txt => txt.Text,
            IntegerQuestion integer => integer.Text,
            FloatQuestion floatQ => floatQ.Text,
            _ => "Pregunta desconocida"
        };
    }

    private static string GetAnswerValue(IOperationAnswer? answer)
    {
        if (answer == null) return "Sin respuesta";

        return answer switch
        {
            TextAnswer text => text.Value ?? "Sin respuesta",
            IntegerAnswer integer => integer.Value.ToString(),
            FloatAnswer floatA => floatA.Value.ToString("F2"),
            OptionAnswer option => string.Join(", ", option.Values?.Select(v => v.Code) ?? []),
            _ => "Tipo de respuesta desconocido"
        };
    }

    private static string GetStatusInSpanish(string status)
    {
        return status switch
        {
            "Released" => "Finalizado",
            "Completed" => "Completado",
            "InProgress" => "En Progreso",
            "Pending" => "Pendiente",
            "Failed" => "Fallido",
            _ => status
        };
    }

    private static string FormatInstant(Instant? instant, string format = "dd MMM yyyy, HH:mm:ss")
    {
        if (instant == null) return "N/A";

        var pattern = InstantPattern.Create(format, CultureInfo.InvariantCulture);
        return pattern.Format(instant.Value);
    }

    private static string CalculateDuration(Instant? start, Instant? end)
    {
        if (start == null || end == null) return "00:00";

        var duration = end.Value - start.Value;
        var totalSeconds = (int)duration.TotalSeconds;
        var minutes = totalSeconds / 60;
        var seconds = totalSeconds % 60;

        return $"{minutes:00}:{seconds:00}";
    }
}
