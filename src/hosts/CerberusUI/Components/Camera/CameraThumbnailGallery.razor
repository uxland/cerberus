@using Blazorise
@using Cerberus.BackOffice.Features.Captures
@using Cerberus.UI.Infrastructure
@inject CameraThumbnailsGetter thumbnailsGetter
@inject CameraCapturesGetter capturesGetter

@if(Thumbnails == null || Thumbnails.Count == 0)
{
    <h3>No captures yet</h3>
}

<style>
    .thumbnails-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start;
    }

    .thumbnail-card {
        margin: 5px;
    }

    .thumbnail-image {
        width: 100px;
        height: 100px;
        object-fit: cover;
    }
</style>


<div class="thumbnails-container">
    @foreach (var capture in Captures)
    {
        <div class="thumbnail-card">
            <Card Style="width: 110px">
                <CardImage Style="width: 100px; height: 100px;" Source="@GetCaptureThumbnailPath(capture)"  alt="Camera Thumbnail"/>
                <CardBody>
                    <CardTitle Size="5">Capture</CardTitle>
                    <div>
                        <a href="@GetCaptureSnapshotPath(capture)" target="_blank">Full image</a>
                    </div>
                </CardBody>
            </Card>
        </div>
    }
</div>

@*<CardDeck>
    @foreach (var capture in Captures)
    {
        <Card Style="width: 110px">
            <CardImage Style="width: 100px; height: 100px;" Source="@GetCaptureThumbnailPath(capture)"  alt="Camera Thumbnail"/>
            <CardBody>
                <CardTitle Size="5">Capture</CardTitle>
                <CardText>
                    Capture took at @capture.At.ToString()
                </CardText>
                <div>
                    <a href="@GetCaptureSnapshotPath(capture)" target="_blank">Full image</a>
                </div>
            </CardBody>
        </Card>
    }
</CardDeck>*@
@code {
    [Parameter]
    public string CameraId { get; set; }
    public List<string> Thumbnails { get; set; } = new List<string>();
    public List<Capture> Captures { get; set; } = new List<Capture>();

    protected override async Task OnInitializedAsync()
    {
        this.Thumbnails = await thumbnailsGetter.GetCameraThumbnails(this.CameraId);
        this.Captures = await capturesGetter.GetCameraCaptures(this.CameraId);
    }
    
    public string GetCaptureThumbnailPath(Capture capture)
    {
        return $"/images/{capture.ThumbnailPath}";
    }
    public string GetCaptureSnapshotPath(Capture capture)
    {
        return $"/images/{capture.SnapshotPath}";
    }

}