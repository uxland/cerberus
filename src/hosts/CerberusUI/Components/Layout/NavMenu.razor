@using Cerberus.BackOffice.Features.OrganizationalStructure.HierarchyItems
@using Cerberus.UI.Infrastructure
@using Cerberus.UI.Components.Layout.UIComponents
@inject TreeItemsLoader treeItemsLoader
@inject LocationStructureNotificationsService locationStructureNotificationsService
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Cerverus UI</a>
    </div>
   
</div>

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
    </nav>
    <ul class="nav flex-column">
        @foreach (var item in Items)
        {
        <LocationNavLink Item="item" />
        }
    </ul>
</div>


@code
{
    IEnumerable<NavigationMenuItem> Items { get; set; } = new List<NavigationMenuItem>();
    protected override async Task OnInitializedAsync()
    {
        locationStructureNotificationsService.StructureChanged += Refresh;
        await this.LoadItems();
    }

    private NavigationMenuItem CreateTreeItem(HierarchyItem item, List<HierarchyItem> items)
    {
        return new NavigationMenuItem(item, items.Where(child => child.ParentId == item.Id).Select(child => CreateTreeItem(child, items)).ToList());
    }

    private async void Refresh()
    {
        await this.InvokeAsync(async () =>
        {
            try
            {
                Items = null;
                await this.LoadItems();
                this.StateHasChanged();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        });
        
        
    }

    private async Task LoadItems()
    {
        var items = (await treeItemsLoader.LoadAll()).ToList();
        Items = items.Where(i => string.IsNullOrEmpty(i.ParentId)).Select(item => CreateTreeItem(item, items)).ToList();
    }
}

