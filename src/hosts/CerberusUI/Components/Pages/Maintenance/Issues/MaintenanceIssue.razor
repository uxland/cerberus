@page "/maintenance-issues/{Id}"
@using Blazorise
@using Cerberus.Maintenance.Features.Features.Issues
@using Cerberus.Maintenance.Features.Features.Issues.GetDetail
@using Cerberus.UI.Infrastructure.Extensions
@using Cerberus.UI.Infrastructure.Maintenance.Isues
@inject MaintenanceIssueDetailGetter maintenanceIssueDetailGetter
@inject MaintenanceIssueCommander maintenanceIssueCommander

@rendermode InteractiveServer
<h3>MaintenanceIssue</h3>

<Row Margin="Margin.Is3">
    @if(@Issue?.CaptureError != null)
    {
        <Row>
            <CaptureErrorView Issue="@Issue"></CaptureErrorView>    
        </Row>
        <Row>
            <IssueExecution Issue="@Issue"></IssueExecution>    
        </Row>
        
    }
    else
    {
        <Column ColumnSize="ColumnSize.Is10">
            <CardImage Source="@Issue?.SnapshotUrl.GetImageUrl()" alt="Issue snapshot"/>
        </Column>
        <Column ColumnSize="ColumnSize.Is2">
            <Row>
                <AnalysisIssuesView Issue="@Issue"></AnalysisIssuesView>    
            </Row>
            <Row>
                <IssueExecution Issue="@Issue"></IssueExecution>
            </Row>
        </Column>
        
    }
</Row>
@if (@Issue?.Status != MaintenanceIssueStatus.Closed)
{
    <Row JustifyContent="JustifyContent.Right" Margin="Margin.Is3">
        <Column ColumnSize="ColumnSize.IsAuto">
            <Button Clicked="Act" Color="Color.Primary">@(Issue?.Status == MaintenanceIssueStatus.Open ? "Start" : "End") </Button>
        </Column>
    </Row>
    
}

@code {
    [Parameter] public required string Id { get; set; }

    public MaintenanceIssueDetail? Issue { get; set; }
    
    private string GetTitle()
    {
        return Issue?.CaptureError != null ? $"{Issue.CaptureError.Type} - {Issue.CaptureError.Message}" : "Analysis errors";
    }

    private async Task Act()
    {
        if (this.Issue == null || this.Issue.Status == MaintenanceIssueStatus.Closed)
            return;
        var task = this.Issue.Status == MaintenanceIssueStatus.Open ? 
            maintenanceIssueCommander.Start(Id) : maintenanceIssueCommander.End(Id);
        await task;
        await this.LoadIssue();
    }

    protected override async Task OnInitializedAsync()
    {
        await this.LoadIssue();
    }
    
    private async Task LoadIssue()
    {
        this.Issue = await maintenanceIssueDetailGetter.Get(Id);
    }

}
